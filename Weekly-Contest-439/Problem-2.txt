class Solution {
public:
    int nextChar(char a, char b,int k){
        int forward = (b -a + 26) % 26;
        int backward = (a - b + 26) % 26;
        return min(forward, backward);
    }

    int solve(string& s,int n, int low, int high, int k, vector<vector<vector<int>>>& dp){
        if(low>high)return 0;
        if(low == high)return 1;
        if(dp[low][high][k] !=-1)return dp[low][high][k];
        int val = 0;
        if(s[low] ==  s[high]){
            return dp[low][high][k] =  2+ solve(s, n, low+1, high-1, k, dp);

        }
        int workout = nextChar(s[low], s[high], k);
        if ( k - workout >= 0) {
              val =  max(2 + solve(s, n, low + 1, high - 1, k - workout, dp), val);
        }
       
        return dp[low][high][k] = max({solve(s, n, low, high - 1, k, dp), 
                            solve(s, n, low + 1, high, k, dp), val});
    }
    int longestPalindromicSubsequence(string s, int k) {
        int n = s.size();
        int low = 0, high = n-1;
        int idx =0;
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(n, vector<int>(k+1, -1)));
        return solve(s, n, low, high, k, dp);
    }
};